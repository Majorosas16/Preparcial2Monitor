(()=>{"use strict";var t,e;!function(t){t.ADD_TASK="ADD_TASK",t.REMOVE_TASK="REMOVE_TASK",t.TOGGLE_TASK="TOGGLE_TASK"}(t||(t={})),function(t){t.STORE="STORE"}(e||(e={}));let s=(({key:t,defaultValue:e})=>{const s=localStorage.getItem(t)||sessionStorage.getItem(t);return s?JSON.parse(s):e})({key:e.STORE,defaultValue:{tasks:[]}}),a=[];const n=n=>{const i=((e,s)=>{const{action:a,payload:n}=e;switch(a){case t.ADD_TASK:return Object.assign(Object.assign({},s),{tasks:[...s.tasks,n]});case t.REMOVE_TASK:return Object.assign(Object.assign({},s),{tasks:s.tasks.filter((t=>t.id!==n))});case t.TOGGLE_TASK:return Object.assign(Object.assign({},s),{tasks:s.tasks.map((t=>t.id===n?Object.assign(Object.assign({},t),{state:!t.state}):t))});default:return s}})(n,JSON.parse(JSON.stringify(s)));var o;s=i,o=i,(({key:t,value:e,session:s=!1})=>{const a=s?sessionStorage:localStorage,n=JSON.stringify(e);a.setItem(t,n)})({key:e.STORE,value:o}),a.forEach((t=>t.render()))},i=t=>{a=[...a,t]};class o extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),i(this)}connectedCallback(){this.render()}render(){var e;this.shadowRoot&&(this.shadowRoot.innerHTML='\n        <h2>PreParcial 2</h2>\n         <form class="task-form">\n            <input type="text" id="text-input" placeholder="Nombre de tarea" required />\n            <button type="submit" id="add-btn">Agregar</button>\n         </form>\n        ');const s=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector(".task-form");null==s||s.addEventListener("submit",(e=>{var s;e.preventDefault();const a=null===(s=this.shadowRoot)||void 0===s?void 0:s.querySelector("#text-input"),i={id:(new Date).getTime(),title:a.value,state:!1};var o;n((o=i,{action:t.ADD_TASK,payload:o}))}))}}var r;customElements.define("task-form",o),function(t){t.uid="uid",t.tasktitle="tasktitle",t.state="state"}(r||(r={}));class c extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),i(this)}static get observedAttributes(){return Object.keys({uid:null,tasktitle:null,state:null})}connectedCallback(){this.render()}attributeChangedCallback(t,e,s){switch(t){case r.uid:this.uid=s?Number(s):void 0;break;case r.state:this.state=s?"true"===s:void 0;break;default:this[t]=s}this.render()}render(){var e,s;this.shadowRoot&&(this.shadowRoot.innerHTML=`\n\t\t\t<article>\n\t\t\t\t<h3>${this.tasktitle}</h3>\n\t\t\t\t<button class="delete-task">Delete</button>\n\t\t\t\t<input type="checkbox" ${this.state?"checked":""} class="check-task">\n\t\t\t</article>\n\t\t`);const a=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector(".delete-task"),i=null===(s=this.shadowRoot)||void 0===s?void 0:s.querySelector(".check-task");null==a||a.addEventListener("click",(()=>{var e;console.log("click",this.uid),n((e=this.uid,{action:t.REMOVE_TASK,payload:e}))})),null==i||i.addEventListener("change",(()=>{var e;n((e=this.uid,{action:t.TOGGLE_TASK,payload:e}))}))}}customElements.define("task-item",c);class l extends HTMLElement{constructor(){super(),this.taskItems=[],this.attachShadow({mode:"open"}),i(this),s.tasks.forEach((t=>{const{id:e,title:s,state:a}=t,n=this.ownerDocument.createElement("task-item");n.setAttribute(r.uid,e),n.setAttribute(r.tasktitle,s),n.setAttribute(r.state,a),this.taskItems.push(n)}))}connectedCallback(){this.render()}render(){this.shadowRoot&&this.taskItems.forEach((t=>{var e;null===(e=this.shadowRoot)||void 0===e||e.appendChild(t)}))}}customElements.define("task-list",l);class d extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),i(this)}connectedCallback(){this.render()}render(){this.shadowRoot&&(this.shadowRoot.innerHTML="\n\t\t<task-form></task-form>\n\t\t\n\t\t<task-list></task-list>\n\t\t")}}customElements.define("app-container",d)})();